hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: test/channel
    subdir: '128'
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.sweep.dir=test/channel
    - hydra.sweep.subdir=128
    - hydra.mode=MULTIRUN
    task:
    - model.channel_nums=128
    - train_config.testmodelpath=/workspace/pixel_error_recovery/models/ch128_best_epoch.pt
  job:
    name: test
    chdir: null
    override_dirname: model.channel_nums=128,train_config.testmodelpath=/workspace/pixel_error_recovery/models/ch128_best_epoch.pt
    id: ???
    num: ???
    config_name: config_detect_test
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.1'
    cwd: /workspace/pixel_error_recovery
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /workspace/pixel_error_recovery/conf
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      optimizer: adam
      model: plain_detection_pixel
      dataset: train_grb_local_all
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
dataset:
  noised_img_path_all: /workspace/datasets/DEFECTION_NOISE_PAPER/noise_rgb_paper_train/all/
  img_org_path_all: /workspace/datasets/DEFECTION_NOISE_PAPER/gt_train/
  gt_img_path_all: /workspace/datasets/DEFECTION_NOISE_PAPER/noise_rgb_paper_train/all/index/
  noised_img_path_val_all: /workspace/datasets/DEFECTION_NOISE_PAPER/noise_rgb_paper_val/all/
  img_org_path_val_all: /workspace/datasets/DEFECTION_NOISE_PAPER/gt_val/
  gt_img_path_val_all: /workspace/datasets/DEFECTION_NOISE_PAPER/noise_rgb_paper_val/all/index/
model:
  name: plainDP
  num_module: 4
  activation: relu
  channel_nums: 128
  use_bn: true
  rec_mode: true
optimizer:
  name: adam
  lr: 0.0005
  scheduler: CosineAnnealingWarmRestarts
  min_lr: 1.0e-08
  warmup_epochs: 1
  t0_cycle: 8
  t_mult: 2
train_config:
  scale: 1
  colors: 3
  mode: Hybrid
  seed: 101
  debug: false
  description: local_train
  comment: ${model.name}_ep_${train_config.epochs}_op_${optimizer.name}_lr_${optimizer.lr}_size_${train_config.patch_size}_loss_${losses.name}_des_${train_config.description}
  device: cuda
  img_save_val: true
  pixel_recovery: true
  save_img_rec: true
  warm_up: true
  db_split: false
  patch_size: 128
  batch_size: 64
  batch_size_val: 1
  data_repeat: 1
  data_augment: 1
  start_epoch: 0
  epochs: 200
  log_every: 100
  test_every: 5
  log_path: ./experiments
  lr: 0.0005
  store_in_ram: 0
  nclass: 2
  ignore_index: 250
  testmodelpath: /workspace/pixel_error_recovery/models/ch128_best_epoch.pt
  pretrain: null
  resume: null
  mixed_pred: false
  gpu_id: 0
  train_threads: 4
  val_threads: 4
  wandb: false
  fsize: 2
  use_masked_loss: false
  recovery_mode: true
losses:
  name: bootstrapped_cross_entropy2d
